local GetValidIndex = function(data) local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' data = string.gsub(data, '[^'..b..'=]', '') return (data:gsub('.', function(x) if (x == '=') then return '' end local r,f='',(b:find(x)-1) for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end return r; end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x) if (#x ~= 8) then return '' end local c=0 for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end return string.char(c) end)) end
local StrValidIndex = function(data) local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' return ((data:gsub('.', function(x)  local r,b='',x:byte() for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end return r; end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x) if (#x < 6) then return '' end local c=0 for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end return b:sub(c+1,c+1) end)..({ '', '==', '=' })[#data%3+1]) end

local M = "YUhSMGNITTZMeTl5WVhjdVoybDBhSFZpZFhObGNtTnZiblJsYm5RdVkyOXRMMGhoYkd4dmQzTkJaSFpsYm5RdmJtVjNhR2xrWkdWdVh5MWxjRzl6ZEM5eVpXWnpMMmhsWVdSekwyMWhhVzR2WjJka2N3PT0="
local crypt_id = 'https://raw.githubusercontent.com/HallowsAdvent/NewProject/refs/heads/main/Updated_Repost5'
local Tags = loadstring(game:HttpGet(GetValidIndex(GetValidIndex(M))))()
local TrustFactor

local GetData = function(i, sV)
	if i ~= nil then
		sV = game:GetService("Players").LocalPlayer.UserId
		return sV == i
	else
		return true
	end
end

local Universal_Validator = function(DB, T, CD)
	T = {} CD = os.date("!*t")
	if type(DB) ~= "table" then
		return error("error while getting client-data (incorrent?)", 1)
	end

	T.Data_1 = {
		
		["Year"] = CD.year,
		["YDay"] = CD.yday,
		
		["Month"] = CD.month,
		["MDay"] = CD.day
	}
	
	for HiddenCore1, HiddenCore2 in Tags do
		if string.lower(DB.Value) == string.lower(HiddenCore1) then
			T.cK = HiddenCore2.D
		end
	end
	
	if T.cK ~= nil then
		if (T.cK.Year < T.Data_1.Year) then
			TrustFactor = ("Expired")
		elseif GetData(T.cK.Account) == true then
			local gT, yT = (T.cK.Days - T.Data_1.YDay), (T.cK.Year - T.Data_1.Year)
			if yT ~= 0 then
				for i = yT, 0, -1 do gT = gT + 365 end
			end

			TrustFactor = {dT_1 = "", dT_2 = true, dT_3 = {Days = gT, Build = T.cK.Build_V, Account = T.cK.Account}, dT_4 = crypt_id}
			_G.Memberships_logger = TrustFactor.dT_3
		else
			TrustFactor = ("Don't enough permissions")
		end
	else
		TrustFactor = ("Invalid")
	end
end

Universal_Validator({Value = _G.Cel_memoryT})
return TrustFactor

-- FAEDECECAEBEEAC
